"""
A tool for quickly retrieving the descriptions and CVSS scores for a large number of CVEs and listing them in order of severity.

This is intended to automate some work for intelligence analysts and other cybersecurity professionals.

List CVEs for lookup into a text file according to the example provided: CVE-XXXXX&CVE-XXXXX...

Usage: python3 cve-batch-lookup.py filename
"""

import requests
import sys
import time
import csv

def main():
    try:
        print("CVE Batch Lookup Starting...\n")
        if len(sys.argv) < 2:
            raise FileNotFoundError
        file_in = open(sys.argv[1], 'r')
        print("File opened successfully.\n")
        cve_list = file_in.readlines()
        cve_list = [line.rstrip('\n') for line in cve_list]
        print("Starting API calls...\n")
        results = []
        list_length = len(cve_list)
        for index, cve in enumerate(cve_list):
            result = {}
            try:
                print(f"[{index + 1}/{list_length}] Searching {cve}")
                response = requests.get('https://services.nvd.nist.gov/rest/json/cve/1.0/' + cve)
                json_res = response.json()
                try:
                    result['cve'] = cve
                    result['descr'] = json_res["result"]["CVE_Items"][0]["cve"]["description"]["description_data"][0]["value"]
                    result['cvss'] = json_res["result"]["CVE_Items"][0]["impact"]["baseMetricV3"]["cvssV3"]["baseScore"]
                    print(f'[+] [main] Response OK!')
                except Exception as e:
                    print(f'[!] [main] Response Error: {str(e)}')
                results.append(result)
                # write results
                row = [result['cve'], result['descr'], result['cvss']]
                with open('results.csv', 'a+', encoding='utf-8', newline='') as file_out:
                    # create the csv writer
                    writer = csv.writer(file_out)
                    # write a row to the csv file
                    writer.writerow(row)
                time.sleep(6)
            except Exception as e:
                print(f'[!] [cve] Error: {str(e)}')
        file_in.close()
    except FileNotFoundError:
        print("You must provide a valid filename as an argument.")
    except KeyError:
        print("One or more of the CVE IDs in the provided file was invalid.")


if __name__ == "__main__":
    main()
